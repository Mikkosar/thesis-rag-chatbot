/**
 * Model Response Service
 * 
 * This module provides a wrapper service for generating AI model responses
 * in the RAG chatbot system. It acts as an intermediary between the chat
 * generation service and the API endpoints, handling response formatting
 * and error management.
 * 
 * The service takes conversation messages, generates an AI response using
 * the core chat completion service, and formats the response into the
 * standardized IChatMessage format expected by the API.
 * 
 * Key responsibilities:
 * - Interface between chat generation and API endpoints
 * - Response formatting and standardization
 * - Error handling and validation
 * - Type safety for chat message structures
 * 
 * @fileoverview AI model response generation and formatting service
 */

import { IChatMessage, IChatMessages } from "@/types/chat-log-types";
import { assert } from "@/utils/assert";
import { getChatCompeletion } from "./chat";

/**
 * Generates and formats AI model response for chat conversations
 * 
 * This function serves as a wrapper around the core chat completion service,
 * providing a clean interface for generating AI responses and formatting them
 * into the standardized message format used throughout the application.
 * 
 * The process involves:
 * 1. Receiving conversation messages from the API
 * 2. Calling the core chat completion service with RAG capabilities
 * 3. Validating the AI response
 * 4. Formatting the response into IChatMessage structure
 * 5. Returning the formatted response for API consumption
 * 
 * @param {IChatMessages} messages - Array of conversation messages including user input
 * @returns {Promise<IChatMessage>} Formatted assistant response message
 * @throws {CustomError} Throws error if AI response generation fails
 */
const getModelResponse = async (messages: IChatMessages) => {
  // Generate AI response using the core chat completion service
  // This includes RAG capabilities, query expansion, and knowledge base search
  const response = await getChatCompeletion(messages);
  assert(response, 500, "Failed to get response from AI");

  // Format the AI response into the standardized IChatMessage structure
  // This ensures consistency with the application's message format
  const assistantResponse: IChatMessage = {
    id: undefined as any,        // ID will be generated by the database when saved
    role: "assistant",           // Indicates this is an AI-generated response
    content: response.text,       // The actual AI-generated text content
  };

  return assistantResponse;
};

export default getModelResponse;
