/**
 * Chat Log Update Service for Streaming Chat
 * 
 * This module handles updating existing chat logs with assistant responses in the
 * streaming chat system. It provides functionality to append AI-generated responses
 * to existing conversation logs, ensuring that streaming chat sessions are properly
 * persisted in the database.
 * 
 * The service is specifically designed for streaming chat scenarios where the
 * assistant response is generated incrementally and needs to be saved as a
 * complete message after the streaming process finishes. This ensures that
 * conversation history is maintained accurately for future reference.
 * 
 * Key responsibilities:
 * - Appending assistant responses to existing chat logs
 * - Message format conversion for database storage
 * - Database update operations with error handling
 * - Streaming completion integration
 * 
 * @fileoverview Chat log update service for streaming chat assistant responses
 */

import ChatLog from "@/models/chat-log";
import { IMessage } from "@/types/chat-log-types";
import { assert } from "@/utils/assert";

/**
 * Updates an existing chat log with the complete assistant response from streaming
 * 
 * This function appends the final assistant response to an existing chat log after
 * the streaming process completes. It's designed to work with the streaming chat
 * system where responses are generated incrementally and need to be saved as a
 * complete message once the streaming finishes.
 * 
 * The function:
 * 1. Creates an IMessage object with the complete assistant response
 * 2. Updates the existing chat log by appending the new message
 * 3. Validates that the chat log exists and was updated successfully
 * 4. Handles errors if the chat log is not found
 * 
 * @param {string} finalChatLogId - ID of the existing chat log to update
 * @param {string} fullText - Complete assistant response text from streaming
 * @returns {Promise<void>} Promise that resolves when update is complete
 * @throws {CustomError} Throws error if chat log is not found or update fails
 */
const updateLogWithAssistantMessage = async (
  finalChatLogId: string,
  fullText: string
): Promise<void> => {
  // Create assistant message object in the format expected by the database
  const assistantResponse: IMessage = {
    id: undefined as any,        // ID will be generated by the database
    role: "assistant",           // Indicates this is an AI-generated response
    content: fullText,           // Complete assistant response text
  };

  // Update the existing chat log by appending the assistant response
  const result = await ChatLog.findByIdAndUpdate(
    finalChatLogId,
    {
      $push: { messages: assistantResponse },  // Append new message to messages array
    },
    { new: true }                              // Return updated document
  );
  
  // Ensure the chat log was found and updated successfully
  assert(result, 404, "Chat log not found");
};

export default updateLogWithAssistantMessage;
