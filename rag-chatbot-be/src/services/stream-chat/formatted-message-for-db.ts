/**
 * Message Formatting Service for Database Storage
 * 
 * This module provides message formatting functionality for the streaming chat system.
 * It converts UIMessage format (used by the AI SDK for streaming) into IChatMessage
 * format (used for database storage), ensuring compatibility between the streaming
 * interface and the persistent storage system.
 * 
 * The service handles the conversion of complex UIMessage structures with multiple
 * parts into simplified IChatMessage structures suitable for database storage,
 * while preserving the essential message content and role information.
 * 
 * Key responsibilities:
 * - UIMessage to IChatMessage format conversion
 * - Text content extraction from message parts
 * - Role type validation and conversion
 * - Last message identification and formatting
 * 
 * @fileoverview Message format conversion service for streaming chat to database storage
 */

import { IChatMessage } from "@/types/chat-log-types";
import { UIMessage } from "ai";

/**
 * Converts UIMessage format to IChatMessage format for database storage
 * 
 * This function transforms messages from the AI SDK's UIMessage format (used for
 * streaming) into the IChatMessage format (used for database persistence). It
 * extracts text content from message parts and ensures proper role type conversion.
 * 
 * The conversion process:
 * 1. Maps all UIMessage objects to IChatMessage format
 * 2. Extracts text content from message parts (ignoring non-text parts)
 * 3. Converts role types to match database schema requirements
 * 4. Identifies and formats the last user message separately
 * 5. Returns both formatted message array and last message
 * 
 * @param {UIMessage[]} messages - Array of UIMessage objects from streaming chat
 * @returns {Object} Formatted messages for database storage
 * @returns {IChatMessage[]} formattedMessages - All messages converted to IChatMessage format
 * @returns {IChatMessage} formattedLastMessage - Last user message in IChatMessage format
 */
const formattedMessagesForDB = (
  messages: UIMessage[]
): {
  formattedMessages: IChatMessage[];
  formattedLastMessage: IChatMessage;
} => {
  // Convert UIMessage format to IChatMessage format for database storage
  const formattedMessages = messages.map((msg) => ({
    id: undefined as any,                                    // ID will be generated by database
    role: msg.role as "system" | "user" | "assistant",      // Convert role to database schema type
    content: msg.parts                                       // Extract text content from message parts
      .map((part) => (part.type === "text" ? part.text : "")) // Only include text parts, ignore others
      .join(""),                                             // Join multiple text parts into single string
  }));
  
  // Extract and format the last user message separately
  // This is used for updating existing chat logs with new user input
  const formattedLastMessage = {
    id: undefined as any,                                    // ID will be generated by database
    role: "user" as "user",                                 // Ensure role is explicitly user
    content: messages[messages.length - 1].parts            // Extract content from last message
      .map((part) => (part.type === "text" ? part.text : "")) // Only include text parts
      .join(""),                                            // Join multiple text parts into single string
  };
  
  return { formattedMessages, formattedLastMessage };
};

export default formattedMessagesForDB;
